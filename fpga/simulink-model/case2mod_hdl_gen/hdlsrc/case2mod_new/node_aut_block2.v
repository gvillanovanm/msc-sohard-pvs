// -------------------------------------------------------------
// 
// File Name: case2mod_hdl_gen/hdlsrc/case2mod_new/node_aut_block2.v
// Created: 2019-06-20 13:20:44
// 
// Generated by MATLAB 9.5 and HDL Coder 3.13
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: node_aut_block2
// Source Path: case2mod_new/NA6_S1/node_aut
// Hierarchy Level: 2
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module node_aut_block2
          (clk,
           reset,
           enb,
           inActive,
           Trest_def,
           Active,
           state,
           path_timer);

  parameter [15:0] TRRP_def = 100;  // uint16
  parameter [15:0] TERP_defs = 150;  // uint16
  parameter [15:0] TERP_s = 150;  // uint16
  parameter [15:0] TRRP_s = 100;  // uint16
  parameter [15:0] Trest_s = 9999;  // uint16
  parameter [15:0] Terp_min = 150;  // uint16
  parameter [15:0] Terp_max = 150;  // uint16
  // Default encoded enumeration values for type is_NodeAutomaton3
  parameter is_NodeAutomaton3_IN_ERP = 2'd0, is_NodeAutomaton3_IN_RRP = 2'd1, is_NodeAutomaton3_IN_Rest = 2'd2;

  input   clk;
  input   reset;
  input   enb;
  input   inActive;
  input   [15:0] Trest_def;  // uint16
  output  Active;
  output  [7:0] state;  // uint8
  output  [15:0] path_timer;  // uint16


  reg [1:0] is_NodeAutomaton;  // uint8
  reg [15:0] TERP_cur;  // uint16
  reg [15:0] TRRP_cur;  // uint16
  reg [15:0] Trest_cur;  // uint16
  reg [15:0] TERP_def;  // uint16
  reg  Active_reg;
  reg [7:0] state_reg;  // uint8
  reg [15:0] path_timer_reg;  // uint16
  reg [1:0] is_NodeAutomaton_next;  // enum type is_NodeAutomaton3 (3 enums)
  reg [15:0] TERP_cur_next;  // uint16
  reg [15:0] TRRP_cur_next;  // uint16
  reg [15:0] Trest_cur_next;  // uint16
  reg [15:0] TERP_def_next;  // uint16
  reg  Active_reg_next;
  reg [7:0] state_reg_next;  // uint8
  reg [15:0] path_timer_reg_next;  // uint16


  always @(posedge clk or posedge reset)
    begin : SimpleModeling_c4_sqCkIiGJ54r4u5oiueanYzC_node_aut_process
      if (reset == 1'b1) begin
        state_reg <= 8'd0;
        Active_reg <= 1'b0;
        Trest_cur <= Trest_s;
        TERP_def <= TERP_defs;
        TERP_cur <= TERP_s;
        TRRP_cur <= TRRP_s;
        path_timer_reg <= 16'd0;
        is_NodeAutomaton <= is_NodeAutomaton3_IN_Rest;
      end
      else begin
        if (enb) begin
          is_NodeAutomaton <= is_NodeAutomaton_next;
          TERP_cur <= TERP_cur_next;
          TRRP_cur <= TRRP_cur_next;
          Trest_cur <= Trest_cur_next;
          TERP_def <= TERP_def_next;
          Active_reg <= Active_reg_next;
          state_reg <= state_reg_next;
          path_timer_reg <= path_timer_reg_next;
        end
      end
    end

  always @(Active_reg, TERP_cur, TERP_def, TRRP_cur, Trest_cur, Trest_def, inActive,
       is_NodeAutomaton, path_timer_reg, state_reg) begin
    TERP_def_next = TERP_def;
    Active_reg_next = Active_reg;
    state_reg_next = state_reg;
    path_timer_reg_next = path_timer_reg;
    is_NodeAutomaton_next = is_NodeAutomaton;
    TERP_cur_next = TERP_cur;
    TRRP_cur_next = TRRP_cur;
    Trest_cur_next = Trest_cur;
    case ( is_NodeAutomaton)
      is_NodeAutomaton3_IN_ERP :
        begin
          if (inActive) begin
            TERP_cur_next = Terp_min;
            TERP_def_next = Terp_min;
            path_timer_reg_next = 16'd3;
            Active_reg_next = 1'b0;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_ERP;
          end
          else if ( ! inActive && (TERP_cur == 16'b0000000000000000)) begin
            TERP_cur_next = TERP_def;
            path_timer_reg_next = 16'd0;
            Active_reg_next = 1'b0;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_RRP;
          end
          else begin
            TERP_cur_next = TERP_cur - 16'd1;
            path_timer_reg_next = 16'd0;
            Active_reg_next = 1'b0;
            state_reg_next = 8'd2;
          end
        end
      is_NodeAutomaton3_IN_RRP :
        begin
          if (inActive) begin
            TERP_def_next = Terp_min;
            path_timer_reg_next = 16'd3;
            TERP_cur_next = Terp_min;
            TRRP_cur_next = TRRP_def;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_ERP;
          end
          else if ( ! inActive && (TRRP_cur == 16'b0000000000000000)) begin
            TRRP_cur_next = TRRP_def;
            path_timer_reg_next = 16'd0;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_Rest;
          end
          else begin
            TRRP_cur_next = TRRP_cur - 16'd1;
            state_reg_next = 8'd3;
          end
        end
      default :
        begin
          if ( ! inActive && (Trest_cur == 16'b0000000000000000)) begin
            Trest_cur_next = Trest_def;
            Active_reg_next = 1'b1;
            path_timer_reg_next = 16'd0;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_ERP;
          end
          else if (inActive) begin
            Trest_cur_next = Trest_def;
            TERP_def_next = Terp_max;
            TERP_cur_next = Terp_max;
            path_timer_reg_next = 16'd1;
            is_NodeAutomaton_next = is_NodeAutomaton3_IN_ERP;
          end
          else begin
            Trest_cur_next = Trest_cur - 16'd1;
            state_reg_next = 8'd1;
          end
        end
    endcase
  end

  assign Active = Active_reg_next;
  assign state = state_reg_next;
  assign path_timer = path_timer_reg_next;



endmodule  // node_aut_block2

