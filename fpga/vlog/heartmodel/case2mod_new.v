// -------------------------------------------------------------
// 
// File Name: case2mod_new\hdlsrc\case2mod_new\case2mod_new.v
// Created: 2018-10-23 15:33:09
// 
// Generated by MATLAB 9.0 and HDL Coder 3.8
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// NA1Out                        ce_out        1
// NA2Out                        ce_out        1
// NA3Out                        ce_out        1
// NA4Out                        ce_out        1
// NA5Out                        ce_out        1
// NA6Out                        ce_out        1
// NA7Out                        ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: case2mod_new
// Source Path: case2mod_new
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module case2mod_new
          (
           clk,
           reset,
           clk_enable,
           AP,
           VP,
           SArest,
           AVforw,
           PAC_en,
           PVC_en,
           ce_out,
           NA1Out,
           NA2Out,
           NA3Out,
           NA4Out,
           NA5Out,
           NA6Out,
           NA7Out
          );


  input   clk;
  input   reset;
  input   clk_enable;
  input   AP;
  input   VP;
  input   [15:0] SArest;  // uint16
  input   [15:0] AVforw;  // uint16
  input   PAC_en;
  input   PVC_en;
  output  ce_out;
  output  NA1Out;
  output  NA2Out;
  output  NA3Out;
  output  NA4Out;
  output  NA5Out;
  output  NA6Out;
  output  NA7Out;


  wire [15:0] PVC_count_out1;  // uint16
  wire [15:0] NA3_tRest_out1;  // uint16
  wire [15:0] NA2_tRest_out1;  // uint16
  wire [15:0] PA1_forw_out1;  // uint16
  wire [15:0] PA4_forw_out1;  // uint16
  wire [15:0] NA6_tRest_out1;  // uint16
  wire [15:0] PA6_forw_out1;  // uint16
  wire [15:0] NA7_tRest_out1;  // uint16
  wire [15:0] PA7_forw_out1;  // uint16
  wire [15:0] NA5_tRest_out1;  // uint16
  wire [15:0] PA5_forw_out1;  // uint16
  wire [15:0] NA4_tRest_out1;  // uint16
  wire [15:0] PA3_forw_out1;  // uint16
  wire [15:0] PAC_count_out1;  // uint16
  wire Active;
  wire Active_1;
  wire PVC;
  wire PVC_1;
  wire outActive1;
  wire outActive1_1;
  wire [15:0] path_timer;  // uint16
  wire [15:0] path_timer_1;  // uint16
  wire [15:0] path_timer_2;  // uint16
  wire [15:0] path_timer_3;  // uint16
  wire outActive2;
  wire outActive2_1;
  wire [15:0] path_timer_4;  // uint16
  wire [15:0] path_timer_5;  // uint16
  wire [15:0] path_timer_6;  // uint16
  wire outActive2_2;
  wire outActive2_3;
  wire [15:0] path_timer_7;  // uint16
  wire [15:0] path_timer_8;  // uint16
  wire [15:0] path_timer_9;  // uint16
  wire outActive2_4;
  wire outActive2_5;
  wire [15:0] path_timer_10;  // uint16
  wire [15:0] path_timer_11;  // uint16
  wire [15:0] path_timer_12;  // uint16
  wire Active_2;
  wire Active_3;
  wire [15:0] path_timer_13;  // uint16
  wire [15:0] path_timer_14;  // uint16
  wire Active_4;
  wire Active_5;
  wire Active_6;
  wire outActive2_6;
  wire [7:0] state;  // uint8
  wire outActive2_7;
  wire outActive1_2;
  wire outActive1_3;
  wire NA6_OR_out1;
  wire [7:0] state_1;  // uint8
  wire Active_7;
  wire outActive2_8;
  wire [7:0] state_2;  // uint8
  wire outActive2_9;
  wire NA7_OR_out1;
  wire [7:0] state_3;  // uint8
  wire Active_8;
  wire Active_9;
  wire Active_10;
  wire outActive1_4;
  wire [7:0] state_4;  // uint8
  wire outActive1_5;
  wire NA5_OR_out1;
  wire [7:0] state_5;  // uint8
  wire Active_11;
  wire Active_12;
  wire Active_13;
  wire outActive1_6;
  wire [7:0] state_6;  // uint8
  wire outActive1_7;
  wire NA4_OR_out1;
  wire [7:0] state_7;  // uint8
  wire Active_14;
  wire Active_15;
  wire outActive1_8;
  wire [7:0] state_8;  // uint8
  wire outActive1_9;
  wire [15:0] path_timer_15;  // uint16
  wire [15:0] path_timer_16;  // uint16
  wire [15:0] path_timer_17;  // uint16
  wire outActive2_10;
  wire outActive2_11;
  wire [15:0] path_timer_18;  // uint16
  wire [15:0] path_timer_19;  // uint16
  wire [15:0] path_timer_20;  // uint16
  wire Active_16;
  wire Active_17;
  wire PVC_out1;
  wire PVC_2;
  wire outActive2_12;
  wire outActive2_13;
  wire NA3_OR_out1;
  wire [7:0] state_9;  // uint8
  wire Active_18;
  wire Active_19;
  wire Active_20;
  wire outActive1_10;
  wire [7:0] state_10;  // uint8
  wire outActive1_11;
  wire NA2_OR_out1;
  wire [7:0] state_11;  // uint8
  wire Active_21;
  wire Active_22;
  wire outActive1_12;
  wire [7:0] state_12;  // uint8
  wire outActive1_13;
  wire NA1_OR_out1;
  wire [7:0] state_13;  // uint8
  wire Active_23;
  wire Active_24;
  wire Active_25;
  wire Active_26;
  wire Active_27;
  wire Active_28;
  wire Active_29;


  assign PVC_count_out1 = 16'b0000000110010000;



  assign NA3_tRest_out1 = 16'b0010011100001111;



  assign NA2_tRest_out1 = 16'b0010011100001111;



  assign PA1_forw_out1 = 16'b0000000000010110;



  assign PA4_forw_out1 = 16'b0000000000010000;



  assign NA6_tRest_out1 = 16'b0010011100001111;



  assign PA6_forw_out1 = 16'b0000000000100100;



  assign NA7_tRest_out1 = 16'b0010011100001111;



  assign PA7_forw_out1 = 16'b0000000000100110;



  assign NA5_tRest_out1 = 16'b0010011100001111;



  assign PA5_forw_out1 = 16'b0000000000010100;



  assign NA4_tRest_out1 = 16'b0010011100001111;



  assign PA3_forw_out1 = 16'b0000000000101111;



  assign PAC_count_out1 = 16'b0000000011010010;



  assign Active_1 = Active;

  PAC   u_PAC   (.clk(clk),
                 .reset(reset),
                 .enb(clk_enable),
                 .st_en(PAC_en),
                 .count_def(PAC_count_out1),  // uint16
                 .act(Active_1),
                 .PVC(PVC)
                 );

  assign PVC_1 = PVC;

  assign outActive1_1 = outActive1;

  assign path_timer_1 = path_timer;

  assign path_timer_3 = path_timer_2;

  assign outActive2_1 = outActive2;

  assign path_timer_5 = path_timer_4;

  assign path_timer_6 = path_timer;

  assign outActive2_3 = outActive2_2;

  assign path_timer_8 = path_timer_7;

  assign path_timer_9 = path_timer_4;

  assign outActive2_5 = outActive2_4;

  assign path_timer_10 = path_timer_7;

  assign path_timer_12 = path_timer_11;

  assign Active_3 = Active_2;

  assign path_timer_13 = path_timer_11;

  assign path_timer_14 = path_timer_2;

  assign Active_5 = Active_4;

  assign Active_6 = Active;

  PA4_1to6   u_PA4_1to6   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_6),
                           .inActive2(Active_5),
                           .pathTimerEn(path_timer_14),  // uint16
                           .pathTimerEx(path_timer_13),  // uint16
                           .forw_param(PA4_forw_out1),  // uint16
                           .outActive1(outActive1),
                           .outActive2(outActive2_6),
                           .state(state)  // uint8
                           );

  assign outActive2_7 = outActive2_6;

  assign outActive1_3 = outActive1_2;

  assign NA6_OR_out1 = outActive1_3 | outActive2_7;



  NA6_S1   u_NA6_S1   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA6_OR_out1),
                       .Trest_def(NA6_tRest_out1),  // uint16
                       .Active(Active_4),
                       .State(state_1),  // uint8
                       .path_timer(path_timer_11)  // uint16
                       );

  assign Active_7 = Active_4;

  PA6_6to7   u_PA6_6to7   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_7),
                           .inActive2(Active_3),
                           .pathTimerEn(path_timer_12),  // uint16
                           .pathTimerEx(path_timer_10),  // uint16
                           .forw_param(PA6_forw_out1),  // uint16
                           .outActive1(outActive1_2),
                           .outActive2(outActive2_8),
                           .state(state_2)  // uint8
                           );

  assign outActive2_9 = outActive2_8;

  assign NA7_OR_out1 = outActive2_9 | outActive2_5;



  NA7_S2   u_NA7_S2   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA7_OR_out1),
                       .Trest_def(NA7_tRest_out1),  // uint16
                       .Active(Active_2),
                       .State(state_3),  // uint8
                       .path_timer(path_timer_7)  // uint16
                       );

  assign Active_8 = Active_2;

  assign Active_10 = Active_9;

  PA7_5to7   u_PA7_5to7   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_10),
                           .inActive2(Active_8),
                           .pathTimerEn(path_timer_9),  // uint16
                           .pathTimerEx(path_timer_8),  // uint16
                           .forw_param(PA7_forw_out1),  // uint16
                           .outActive1(outActive1_4),
                           .outActive2(outActive2_4),
                           .state(state_4)  // uint8
                           );

  assign outActive1_5 = outActive1_4;

  assign NA5_OR_out1 = outActive1_5 | outActive2_3;



  NA5_F2   u_NA5_F2   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA5_OR_out1),
                       .Trest_def(NA5_tRest_out1),  // uint16
                       .Active(Active_9),
                       .State(state_5),  // uint8
                       .path_timer(path_timer_4)  // uint16
                       );

  assign Active_11 = Active_9;

  assign Active_13 = Active_12;

  PA5_4to5   u_PA5_4to5   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_13),
                           .inActive2(Active_11),
                           .pathTimerEn(path_timer_6),  // uint16
                           .pathTimerEx(path_timer_5),  // uint16
                           .forw_param(PA5_forw_out1),  // uint16
                           .outActive1(outActive1_6),
                           .outActive2(outActive2_2),
                           .state(state_6)  // uint8
                           );

  assign outActive1_7 = outActive1_6;

  assign NA4_OR_out1 = outActive1_7 | outActive2_1;



  NA4_F1   u_NA4_F1   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA4_OR_out1),
                       .Trest_def(NA4_tRest_out1),  // uint16
                       .Active(Active_12),
                       .State(state_7),  // uint8
                       .path_timer(path_timer)  // uint16
                       );

  assign Active_14 = Active_12;

  assign Active_15 = Active;

  PA3_1to4   u_PA3_1to4   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_15),
                           .inActive2(Active_14),
                           .pathTimerEn(path_timer_3),  // uint16
                           .pathTimerEx(path_timer_1),  // uint16
                           .forw_param(PA3_forw_out1),  // uint16
                           .outActive1(outActive1_8),
                           .outActive2(outActive2),
                           .state(state_8)  // uint8
                           );

  assign outActive1_9 = outActive1_8;

  assign path_timer_16 = path_timer_15;

  assign path_timer_17 = path_timer_2;

  assign outActive2_11 = outActive2_10;

  assign path_timer_19 = path_timer_18;

  assign path_timer_20 = path_timer_15;

  assign Active_17 = Active_16;

  PAC   u_PVC   (.clk(clk),
                 .reset(reset),
                 .enb(clk_enable),
                 .st_en(PVC_en),
                 .count_def(PVC_count_out1),  // uint16
                 .act(Active_17),
                 .PVC(PVC_out1)
                 );

  assign PVC_2 = PVC_out1;

  assign outActive2_13 = outActive2_12;

  assign NA3_OR_out1 = PVC_2 | (outActive2_13 | VP);



  NA3_RV   u_NA3_RV   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA3_OR_out1),
                       .Trest_def(NA3_tRest_out1),  // uint16
                       .Active(Active_16),
                       .State(state_9),  // uint8
                       .path_timer(path_timer_18)  // uint16
                       );

  assign Active_18 = Active_16;

  assign Active_20 = Active_19;

  PA2_2to3   u_PA2_2to3   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_20),
                           .inActive2(Active_18),
                           .pathTimerEn(path_timer_20),  // uint16
                           .pathTimerEx(path_timer_19),  // uint16
                           .forw_param(AVforw),  // uint16
                           .outActive1(outActive1_10),
                           .outActive2(outActive2_12),
                           .state(state_10)  // uint8
                           );

  assign outActive1_11 = outActive1_10;

  assign NA2_OR_out1 = outActive1_11 | outActive2_11;



  NA2_AV   u_NA2_AV   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA2_OR_out1),
                       .Trest_def(NA2_tRest_out1),  // uint16
                       .Active(Active_19),
                       .State(state_11),  // uint8
                       .path_timer(path_timer_15)  // uint16
                       );

  assign Active_21 = Active_19;

  assign Active_22 = Active;

  PA1_1to2   u_PA1_1to2   (.clk(clk),
                           .reset(reset),
                           .enb(clk_enable),
                           .inActive1(Active_22),
                           .inActive2(Active_21),
                           .pathTimerEn(path_timer_17),  // uint16
                           .pathTimerEx(path_timer_16),  // uint16
                           .forw_param(PA1_forw_out1),  // uint16
                           .outActive1(outActive1_12),
                           .outActive2(outActive2_10),
                           .state(state_12)  // uint8
                           );

  assign outActive1_13 = outActive1_12;

  assign NA1_OR_out1 = PVC_1 | (AP | (outActive1_1 | (outActive1_13 | outActive1_9)));



  NA1_SA   u_NA1_SA   (.clk(clk),
                       .reset(reset),
                       .enb(clk_enable),
                       .inActive(NA1_OR_out1),
                       .Trest_def(SArest),  // uint16
                       .Active(Active),
                       .State(state_13),  // uint8
                       .path_timer(path_timer_2)  // uint16
                       );

  assign Active_23 = Active;

  assign NA1Out = Active_23;

  assign Active_24 = Active_19;

  assign NA2Out = Active_24;

  assign Active_25 = Active_16;

  assign NA3Out = Active_25;

  assign Active_26 = Active_12;

  assign NA4Out = Active_26;

  assign Active_27 = Active_9;

  assign NA5Out = Active_27;

  assign Active_28 = Active_4;

  assign NA6Out = Active_28;

  assign Active_29 = Active_2;

  assign NA7Out = Active_29;

  assign ce_out = clk_enable;

endmodule  // case2mod_new

